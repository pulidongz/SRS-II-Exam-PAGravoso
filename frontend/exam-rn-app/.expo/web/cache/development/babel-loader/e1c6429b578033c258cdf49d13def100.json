{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/pul/Projects/SRS-II-Exam-PaulAndrewGravoso/frontend/exam-rn-app/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { NavigationContainer, DrawerActions, getFocusedRouteNameFromRoute } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AuthScreen from \"./components/2_AuthScreen/AuthScreen\";\nimport HomeScreen from \"./components/1_HomeScreen/HomeScreen\";\nvar AuthContext = React.createContext();\nvar ScreenStack = createStackNavigator();\nexport default function App() {\n  var _this = this;\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isLoggedIn: true\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isLoggedIn: false\n        });\n    }\n  }, {\n    isLoggedIn: true\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch('http://localhost:5000/api/login', {\n                  method: 'POST',\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    username: data.username,\n                    password: data.password\n                  })\n                }).then(function (response) {\n                  if (response.status == 200) {\n                    dispatch({\n                      type: 'SIGN_IN'\n                    });\n                    return Promise.resolve();\n                  }\n                }).catch(function (error) {\n                  console.log(error);\n                  return Promise.reject();\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isAuthenticated = _React$useState2[0],\n      setIsAuthenticated = _React$useState2[1];\n\n  var handleSignIn = function handleSignIn() {\n    pass;\n  };\n\n  var handleSignOut = function handleSignOut() {\n    pass;\n  };\n\n  var handleSignUp = function handleSignUp() {\n    setIsAuthenticated(false);\n  };\n\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, React.createElement(ScreenStack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, state.isLoggedIn == true ? React.createElement(React.Fragment, null, React.createElement(ScreenStack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    options: function options(_ref) {\n      var route = _ref.route,\n          navigation = _ref.navigation;\n      return {\n        headerTitle: getFocusedRouteNameFromRoute(route),\n        headerRight: function headerRight() {\n          return React.createElement(Button, {\n            onPress: handleSignOut,\n            title: \"Sign Out\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }\n          });\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  })) : React.createElement(React.Fragment, null, React.createElement(ScreenStack.Screen, {\n    name: \"Auth\",\n    component: AuthScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/pul/Projects/SRS-II-Exam-PaulAndrewGravoso/frontend/exam-rn-app/App.js"],"names":["React","NavigationContainer","DrawerActions","getFocusedRouteNameFromRoute","createStackNavigator","AuthScreen","HomeScreen","AuthContext","createContext","ScreenStack","App","useReducer","prevState","action","type","isLoggedIn","state","dispatch","authContext","useMemo","signIn","data","fetch","method","headers","Accept","body","JSON","stringify","username","password","then","response","status","Promise","resolve","catch","error","console","log","reject","signOut","signUp","useState","isAuthenticated","setIsAuthenticated","handleSignIn","pass","handleSignOut","handleSignUp","route","navigation","headerTitle","headerRight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, Button } from 'react-native';\nimport { NavigationContainer, DrawerActions, getFocusedRouteNameFromRoute, } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport AuthScreen from './components/2_AuthScreen/AuthScreen';\nimport HomeScreen from './components/1_HomeScreen/HomeScreen';\n\nconst AuthContext = React.createContext();\nconst ScreenStack = createStackNavigator();\n\nexport default function App() {\n\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isLoggedIn: true,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isLoggedIn: false,\n          };\n      }\n    },\n    {\n      isLoggedIn: true,\n    }\n  );\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async data => {\n        await fetch('http://localhost:5000/api/login',\n          {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              username: data.username,\n              password: data.password\n            })\n          }\n        )\n        .then(response => {\n          if (response.status == 200) {\n            dispatch({ type: 'SIGN_IN'});\n            return Promise.resolve();\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n          return Promise.reject();\n        })\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async data => {\n        dispatch({ type: 'SIGN_IN'});\n      },\n    }),\n    []\n  );\n\n  const [isAuthenticated, setIsAuthenticated] = React.useState(true);\n  \n  const handleSignIn = () => { pass };\n\n  const handleSignOut = () => { pass };\n \n  const handleSignUp = () => {\n    // TODO implement real sign up mechanism\n \n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer>\n        <ScreenStack.Navigator>\n          {state.isLoggedIn == true ? \n            (\n              <>\n              <ScreenStack.Screen name=\"Home\" component={HomeScreen}\n              options={({ route, navigation }) => ({\n                headerTitle: getFocusedRouteNameFromRoute(route),\n                headerRight: () => (\n                  <Button onPress={handleSignOut} title=\"Sign Out\" />\n                ),\n              })} />\n              </>\n            ):(\n              <>\n              <ScreenStack.Screen name=\"Auth\" component={AuthScreen} />\n              </>\n            )\n          }\n        </ScreenStack.Navigator>\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}